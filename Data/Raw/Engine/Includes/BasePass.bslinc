#include "$ENGINE$\GBuffer.bslinc"
#include "$ENGINE$\PerCameraData.bslinc"
#include "$ENGINE$\PerObjectData.bslinc"

#include "$ENGINE$\SkinnedVertexInput.bslinc"
#include "$ENGINE$\NormalVertexInput.bslinc"
#define USE_BLEND_SHAPES
#include "$ENGINE$\SkinnedVertexInput.bslinc"
#include "$ENGINE$\NormalVertexInput.bslinc"
#undef USE_BLEND_SHAPES

Technique : base("BasePassCommon") =
{
	Language = "HLSL11";
	
	Pass =
	{
		Vertex =
		{			
			VStoFS main(VertexInput input)
			{
				VStoFS output;
			
				VertexIntermediate intermediate = getVertexIntermediate(input);
				float4 worldPosition = getVertexWorldPosition(input, intermediate);
				
				output.worldPosition = worldPosition.xyz;
				output.position = mul(gMatViewProj, worldPosition);
				populateVertexOutput(input, intermediate, output);
							
				return output;
			}
		};
		
		Fragment =
		{
			float3 calcWorldNormal(VStoFS input, float3 surfaceNormal)
			{
				float3 tangentToWorldX = input.tangentToWorldX.xyz;
				float3 tangentToWorldZ = input.tangentToWorldZ;
				float3 tangentToWorldY = cross(tangentToWorldZ, tangentToWorldX) * input.tangentToWorldX.w;
				
				float3x3 tangentToWorld = float3x3(tangentToWorldX, tangentToWorldY, tangentToWorldZ);
				
				// Multiplication order flipped because we stored basis vectors as rows
				return normalize(mul(surfaceNormal, tangentToWorld));			
			}
		};
	};
};

Technique
 : base("BasePass")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("NormalVertexInput")
 : inherits("BasePassCommon") =
{ 
	Language = "HLSL11";
};

Technique
 : base("BasePassSkinned")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("SkinnedVertexInput")
 : inherits("BasePassCommon") =
{
	Language = "HLSL11";
};

Technique
 : base("BasePassMorph")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("MorphVertexInput")
 : inherits("BasePassCommon") =
{
	Language = "HLSL11";
};

Technique
 : base("BasePassSkinnedMorph")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("SkinnedMorphVertexInput")
 : inherits("BasePassCommon") =
{
	Language = "HLSL11";
};

Technique 
	: base("BasePassCommon") =
{
	Language = "GLSL";
	
	Pass =
	{
		Vertex =
		{			
			void main()
			{
				VertexIntermediate intermediate;
				getVertexIntermediate(intermediate);
			
				vec4 worldPos;
				getVertexWorldPosition(intermediate, worldPos);
				
				outWorldPosition = worldPos.xyz;
				gl_Position = gMatViewProj * worldPos;
				
				populateVertexOutput(intermediate);
			}
		};
		
		Fragment =
		{
			vec3 calcWorldNormal(vec3 normal, vec4 tangent, vec3 surfaceNormal)
			{
				vec3 tangentToWorldX = tangent.xyz;
				vec3 tangentToWorldZ = normal;
				vec3 tangentToWorldY = cross(tangentToWorldZ, tangentToWorldX) * tangent.w;
				
				mat3 tangentToWorld = mat3(tangentToWorldX, tangentToWorldY, tangentToWorldZ);
				return normalize(tangentToWorld * surfaceNormal);
			}
		};
	};
};

Technique
 : base("BasePass")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("NormalVertexInput")
 : inherits("BasePassCommon") =
{ 
	Language = "GLSL";
};

Technique
 : base("BasePassSkinned")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("SkinnedVertexInput")
 : inherits("BasePassCommon") =
{
	Language = "GLSL";
};

Technique
 : base("BasePassMorph")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("MorphVertexInput")
 : inherits("BasePassCommon") =
{
	Language = "GLSL";
};

Technique
 : base("BasePassSkinnedMorph")
 : inherits("GBuffer")
 : inherits("PerCameraData")
 : inherits("PerObjectData")
 : inherits("SkinnedMorphVertexInput")
 : inherits("BasePassCommon") =
{
	Language = "GLSL";
};