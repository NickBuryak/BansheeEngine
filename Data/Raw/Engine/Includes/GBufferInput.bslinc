#include "$ENGINE$\SurfaceData.bslinc"

Parameters =
{
	Sampler2D 	gGBufferASamp : alias("gGBufferATex");
	Sampler2D 	gGBufferBSamp : alias("gGBufferBTex");
	Sampler2D 	gGBufferCSamp : alias("gGBufferCTex");
	Sampler2D 	gDepthBufferSamp : alias("gDepthBufferTex");
	
	Texture2D 	gGBufferATex : auto("GBufferA");
	Texture2D	gGBufferBTex : auto("GBufferB");
	Texture2D	gGBufferCTex : auto("GBufferC");
	Texture2D 	gDepthBufferTex : auto("GBufferDepth");
};

Technique 
 : inherits("SurfaceData")
 : inherits("PerCameraData")
 : base("GBufferInput") =
{
	Language = "HLSL11";

	Pass =
	{
		Common = 
		{
			SamplerState gGBufferASamp : register(s0);
			SamplerState gGBufferBSamp : register(s1);
			SamplerState gGBufferCSamp : register(s2);
			SamplerState gDepthBufferSamp : register(s3);
	
			#if MSAA_COUNT > 1
			Texture2DMS<float4, MSAA_COUNT> gGBufferATex : register(t0);
			Texture2DMS<float4, MSAA_COUNT>	gGBufferBTex : register(t1);
			Texture2DMS<float2, MSAA_COUNT>	gGBufferCTex : register(t2);
			Texture2DMS<float4, MSAA_COUNT> gDepthBufferTex : register(t3);
			#else
			Texture2D gGBufferATex : register(t0);
			Texture2D gGBufferBTex : register(t1);
			Texture2D gGBufferCTex : register(t2);
			Texture2D gDepthBufferTex : register(t3);
			#endif
			
			SurfaceData decodeGBuffer(float4 GBufferAData, float4 GBufferBData, float2 GBufferCData, float deviceZ)
			{
				SurfaceData output;
				
				output.albedo.xyz = GBufferAData.xyz;
				output.albedo.w = 1.0f;
				output.worldNormal = GBufferBData * float4(2, 2, 2, 1) - float4(1, 1, 1, 0);
				output.worldNormal.xyz = normalize(output.worldNormal.xyz);
				output.depth = convertFromDeviceZ(deviceZ);
				output.roughness = GBufferCData.x;
				output.metalness = GBufferCData.y;
				
				return output;
			}
			
			#if MSAA_COUNT > 1
			SurfaceData getGBufferData(uint2 pixelPos, uint sampleIndex)
			{
				float4 GBufferAData = gGBufferATex.Load(pixelPos, sampleIndex);
				float4 GBufferBData = gGBufferBTex.Load(pixelPos, sampleIndex);
				float2 GBufferCData = gGBufferCTex.Load(pixelPos, sampleIndex).rg;
				float deviceZ = gDepthBufferTex.Load(pixelPos, sampleIndex).r;
				
				return decodeGBuffer(GBufferAData, GBufferBData, GBufferCData, deviceZ);
			}
			
			#else
			SurfaceData getGBufferData(uint2 pixelPos)
			{
				float4 GBufferAData = gGBufferATex.Load(int3(pixelPos, 0));
				float4 GBufferBData = gGBufferBTex.Load(int3(pixelPos, 0));
				float2 GBufferCData = gGBufferCTex.Load(int3(pixelPos, 0)).rg;
				float deviceZ = gDepthBufferTex.Load(int3(pixelPos, 0)).r;
				
				return decodeGBuffer(GBufferAData, GBufferBData, GBufferCData, deviceZ);
			}			
			#endif			
		};
	};
};