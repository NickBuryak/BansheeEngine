Parameters =
{		
#ifdef ENABLE_MSAA
	Texture2DMS 	gSource;
	int				gNumSamples;
#else
	Texture2D 	gSource;
#endif
};

Technique =
{
	Pass =
	{
		DepthRead = false;
		DepthWrite = false;
	
		Common = 
		{
			struct VStoFS
			{
				float4 position : SV_POSITION;
				float2 uv0 : TEXCOORD0;
			};
		};
	
		Vertex =
		{
			struct VertexInput
			{
				float2 screenPos : POSITION;
				float2 uv0 : TEXCOORD0;
			};
			
			VStoFS main(VertexInput input)
			{
				VStoFS output;
			
				output.position = float4(input.screenPos, 0, 1);
				output.uv0 = input.uv0;

				return output;
			}			
		};
		
		Fragment = 
		{
			#ifdef ENABLE_MSAA
			
			cbuffer FragParams
			{
				int gNumSamples;
			};
			
			Texture2DMS<float4> gSource : register(t0);
			
			float4 main(VStoFS input) : SV_Target0
			{
				int2 iUV = trunc(input.uv0);
			
				float4 sum = float4(0, 0, 0, 0);
				for(int i = 0; i < gNumSamples; i++)
					sum += gSource.Load(iUV, i);
					
				return sum / gNumSamples;
			}
			
			#else
			
			Texture2D<float4> gSource : register(t0);
		
			float4 main(VStoFS input) : SV_Target0
			{
				int2 iUV = trunc(input.uv0);
				return gSource.Load(int3(iUV.xy, 0));
			}
			
			#endif
		};
	};
};