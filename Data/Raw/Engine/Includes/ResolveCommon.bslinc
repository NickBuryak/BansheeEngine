technique Resolve
{
	depth
	{
		read = false;
		write = false;
	};

	code
	{
		struct VStoFS
		{
			float4 position : SV_POSITION;
			float2 uv0 : TEXCOORD0;
		};

		struct VertexInput
		{
			float2 screenPos : POSITION;
			float2 uv0 : TEXCOORD0;
		};
		
		VStoFS vsmain(VertexInput input)
		{
			VStoFS output;
		
			output.position = float4(input.screenPos, 0, 1);
			output.uv0 = input.uv0;

			return output;
		}			

		#ifdef ENABLE_MSAA
		
		cbuffer FragParams
		{
			int gNumSamples;
		};
		
		Texture2DMS<float4> gSource;
		
		float4 fsmain(VStoFS input) : SV_Target0
		{
			int2 iUV = trunc(input.uv0);
		
			float4 sum = float4(0, 0, 0, 0);
			for(int i = 0; i < gNumSamples; i++)
				sum += gSource.Load(iUV, i);
				
			return sum / gNumSamples;
		}
		
		#else
		
		Texture2D<float4> gSource;
	
		float4 fsmain(VStoFS input) : SV_Target0
		{
			int2 iUV = trunc(input.uv0);
			return gSource.Load(int3(iUV.xy, 0));
		}
		
		#endif
	};
};